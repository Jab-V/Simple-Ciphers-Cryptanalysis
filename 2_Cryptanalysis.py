def Out_text(mat):    message=''   for i in range(mat.shape[0]):     for j in range(mat.shape[1]):          message=message+mat[i][j]   return  message  def Cryptanalysis(known_text_mat,cipher):  for t in range(len(known_text_mat)):     known_text=known_text_mat[t]                       known_text=text_to_num(known_text)     #print('text_to_num',known_text)     n_key=int(math.sqrt(len(known_text) ))     print('####################################################################')     print('####################################################################')     print('                           ','Key dimension:',n_key,'               ')     print('####################################################################')     print('####################################################################')     cipher_num=text_to_num(cipher)     #print(cipher_num)     #print(Mat_text(known_text,n_key))     for h in range(len(cipher_num)-len(known_text)+1 ):       probable_match=np.zeros((n_key,n_key))              k=h       for i in range(n_key):           for j in range(n_key):               probable_match[i][j]=cipher_num[k]               k=k+1      # print('probable_match',probable_match)              ""       try:          key=np.matmul(invesre_mat(Mat_text(known_text,n_key))%26,probable_match)%26         cipher_text=Mat_text(cipher_num,n_key)         probable_text=Out_text(Text_Decryption(cipher_text,key)[1])         print('First place:',h,', key:',key,', plane text:', probable_text)         print('------------------------------------------------------------------')       except:             pass         ""